# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tQZhM5VooXi7yZsys9EnE0QjoL2kJVrd
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

event = pd.read_csv('titanic_train.csv')

colheading=['UniqueID','TurnedUp','Year','Name','Sex','Age','EventsParticipated','EventsWon','Ticket','Points','Cabin','Residents']
event=pd.read_csv('titanic_train.csv',header=None,skiprows=1,names=colheading)

event.head()

event['Age'].hist(bins=30,histtype='bar',color='darkred',alpha=0.3)
plt.ylabel('No. of Students')
plt.xlabel('Age')
plt.show()

event['Points'].hist(color='green',bins=40)

def empty_age(cols):
    Age = cols[0]
    Year = cols[1]
    
    if pd.isnull(Age):

        if Year == 1:
            return 19

        elif Year == 2:
            return 20

        else:
            return 21

    else:
        return Age

event['Age'] = event[['Age','Year']].apply(empty_age,axis=1)

event.dropna(inplace=True)

sex = pd.get_dummies(event['Sex'],drop_first=True)

sex.head()

residents = pd.get_dummies(event['Residents'],drop_first=True)

residents.head()

event.drop(['Sex','Residents','Name','Ticket','Cabin'],axis=1,inplace=True)

event.head()

event = pd.concat([event,sex,residents],axis=1)

event.head()

#train test split
event.drop('TurnedUp',axis=1).head()

event['TurnedUp'].head()

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(event.drop('TurnedUp',axis=1), 
                                                    event['TurnedUp'], test_size=0.30, 
                                                    random_state=101)

from sklearn.linear_model import LogisticRegression

logmodel = LogisticRegression()

logmodel.fit(X_train,y_train)

predictions = logmodel.predict(X_test)

from sklearn.metrics import confusion_matrix

accuracy=confusion_matrix(y_test,predictions)

from sklearn.metrics import accuracy_score

accuracy=accuracy_score(y_test,predictions)
accuracy

from sklearn.metrics import classification_report

print(classification_report(y_test,predictions))